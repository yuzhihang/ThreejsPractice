{"remainingRequest":"/Users/Rossonero/Developer/vuepractice/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/Rossonero/Developer/vuepractice/src/App.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/Rossonero/Developer/vuepractice/src/App.vue","mtime":1556272769763},{"path":"/Users/Rossonero/Developer/vuepractice/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/Rossonero/Developer/vuepractice/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Rossonero/Developer/vuepractice/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#app {\n    font-family: 'Avenir', Helvetica, Arial, sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    text-align: center;\n    color: #2c3e50;\n    margin-top: 60px;\n    width: 100%;\n    /*height:100%;*/\n}\n\n#stats-output {\n    position:absolute;\n    top:0;\n    width:20%;\n    height:50px;\n}\n",{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":".","sourcesContent":["<template>\n\n    <div id=\"app\">\n        <div id=\"stats-output\">\n\n        </div>\n        <!--<img alt=\"Vue logo\" src=\"./assets/logo.png\">-->\n        <!--<HelloWorld msg=\"Welcome to Your Vue.js App\"/>-->\n    </div>\n</template>\n\n<script>\n    // import HelloWorld from './components/HelloWorld.vue'\n    // import * as THREE from 'three'\n    import THREE from './learning-threejs-master/libs/three'\n    import Stats from './learning-threejs-master/libs/stats'\n    import dat from './learning-threejs-master/libs/dat.gui'\n    // import State from 'sta'\n\n    export default {\n        // elm:'#app',\n        data: () => ({\n            controls: {\n                scene: null,\n                camera: null,\n                renderer: null,\n                rotationSpeed: 0.02\n            }\n        }),\n        created() {\n            this.$nextTick(() => {\n                this.init()\n            })\n        },\n        methods: {\n            init() {\n\n                // window.addEventListener('resize', this.onResize, false)\n\n                this.scene = new THREE.Scene();\n\n                // create a this.camera, which defines where we're looking at.\n                this.camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);\n\n                // create a render and set the size\n                this.renderer = new THREE.WebGLRenderer();\n\n                this.renderer.setClearColor(new THREE.Color(0xEEEEEE, 1.0));\n                this.renderer.setSize(window.innerWidth, window.innerHeight);\n                this.renderer.shadowMapEnabled = true;\n\n                // create the ground plane\n                var planeGeometry = new THREE.PlaneGeometry(60, 20, 1, 1);\n                var planeMaterial = new THREE.MeshLambertMaterial({color: 0xffffff});\n                var plane = new THREE.Mesh(planeGeometry, planeMaterial);\n                plane.receiveShadow = true;\n\n                // rotate and position the plane\n                plane.rotation.x = -0.5 * Math.PI;\n                plane.position.x = 15;\n                plane.position.y = 0;\n                plane.position.z = 0;\n\n                // add the plane to the this.scene\n                this.scene.add(plane);\n\n                var axes = new THREE.AxisHelper(20);\n                this.scene.add(axes);\n\n                // create a cube\n                var cubeGeometry = new THREE.BoxGeometry(4, 4, 4);\n                var cubeMaterial = new THREE.MeshLambertMaterial({color: 0xff0000});\n                var cube = new THREE.Mesh(cubeGeometry, cubeMaterial);\n                cube.castShadow = true;\n\n                // position the cube\n                cube.position.x = -4;\n                cube.position.y = 3;\n                cube.position.z = 0;\n\n                // add the cube to the this.scene\n                this.scene.add(cube);\n\n                var sphereGeometry = new THREE.SphereGeometry(4, 20, 20);\n                var sphereMaterial = new THREE.MeshLambertMaterial({color: 0x7777ff});\n                var sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\n\n                // position the sphere\n                sphere.position.x = 20;\n                sphere.position.y = 0;\n                sphere.position.z = 2;\n                sphere.castShadow = true;\n\n                // add the sphere to the this.scene\n                this.scene.add(sphere);\n\n                // position and point the this.camera to the center of the this.scene\n                this.camera.position.x = -30;\n                this.camera.position.y = 40;\n                this.camera.position.z = 30;\n                this.camera.lookAt(this.scene.position);\n\n                // add subtle ambient lighting\n                var ambientLight = new THREE.AmbientLight(0x0c0c0c);\n                this.scene.add(ambientLight);\n\n                var spotLight = new THREE.SpotLight(0xffffff);\n                spotLight.position.set(-40, 60, -10);\n                spotLight.castShadow = true;\n                this.scene.add(spotLight);\n\n                let step = 0\n\n                let renderAnimation = () => {\n                    stats.update()\n\n                    cube.rotation.x += controls.rotationSpeed\n                    cube.rotation.y += controls.rotationSpeed\n                    cube.rotation.z += controls.rotationSpeed\n\n                    step += controls.bouncingSpeed\n                    sphere.position.x = 20 + (10 * (Math.cos(step)))\n                    sphere.position.y = 2 + (10 * (Math.sin(step)))\n\n                    requestAnimationFrame(renderAnimation)\n                    this.renderer.render(this.scene, this.camera)\n                }\n\n                let controls = {rotationSpeed: 0.02, bouncingSpeed: 0.05}\n                let gui = new dat.GUI();\n                gui.add(controls, 'rotationSpeed', 0, 0.5)\n                gui.add(controls, 'bouncingSpeed', 0, 0.5)\n\n                // add the output of the this.renderer to the html element\n                document.getElementById(\"app\").appendChild(this.renderer.domElement)\n                let stats = this.initState()\n\n                // call the render function\n                renderAnimation();\n            },\n            initState() {\n                let stats = new Stats()\n                stats.setMode(0)\n                stats.domElement.style.position = 'absolute'\n                stats.domElement.style.left = '0'\n                stats.domElement.style.right = '0'\n                document.getElementById('stats-output')\n                    .appendChild(stats.domElement)\n                return stats\n            },\n            onResize() {\n                this.camera.aspect = window.innerWidth / window.innerHeight\n                this.camera.updateProjectionMatrix()\n                this.renderer.setSize(window.innerWidth, window.innerHeight)\n            }\n\n        }\n    }\n</script>\n\n\n<style>\n    #app {\n        font-family: 'Avenir', Helvetica, Arial, sans-serif;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n        text-align: center;\n        color: #2c3e50;\n        margin-top: 60px;\n        width: 100%;\n        /*height:100%;*/\n    }\n\n    #stats-output {\n        position:absolute;\n        top:0;\n        width:20%;\n        height:50px;\n    }\n</style>\n"]}]}